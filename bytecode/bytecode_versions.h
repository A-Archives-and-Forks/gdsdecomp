// This file is automatically generated by `bytecode_generator.py`
// Do not edit this file directly, as it will be overwritten.
// Instead, edit `bytecode_generator.py` and run it to generate this file.

// clang-format off
#pragma once

#include "bytecode/bytecode_base.h"
#include "bytecode/bytecode_custom.h"

#include "bytecode/bytecode_ebc36a7.h"
#include "bytecode/bytecode_2e216b5.h"
#include "bytecode/bytecode_ee121ef.h"
#include "bytecode/bytecode_b59d6be.h"
#include "bytecode/bytecode_77af6ca.h"
#include "bytecode/bytecode_f3f05dc.h"
#include "bytecode/bytecode_506df14.h"
#include "bytecode/bytecode_a7aad78.h"
#include "bytecode/bytecode_5565f55.h"
#include "bytecode/bytecode_6694c11.h"
#include "bytecode/bytecode_a60f242.h"
#include "bytecode/bytecode_c00427a.h"
#include "bytecode/bytecode_620ec47.h"
#include "bytecode/bytecode_7f7d97f.h"
#include "bytecode/bytecode_514a3fb.h"
#include "bytecode/bytecode_1a36141.h"
#include "bytecode/bytecode_1ca61a3.h"
#include "bytecode/bytecode_d6b31da.h"
#include "bytecode/bytecode_8aab9a0.h"
#include "bytecode/bytecode_a3f1ee5.h"
#include "bytecode/bytecode_8e35d93.h"
#include "bytecode/bytecode_3ea6d9f.h"
#include "bytecode/bytecode_a56d6ff.h"
#include "bytecode/bytecode_ff1e7cf.h"
#include "bytecode/bytecode_054a2ac.h"
#include "bytecode/bytecode_91ca725.h"
#include "bytecode/bytecode_216a8aa.h"
#include "bytecode/bytecode_d28da86.h"
#include "bytecode/bytecode_c6120e7.h"
#include "bytecode/bytecode_015d36d.h"
#include "bytecode/bytecode_5e938f0.h"
#include "bytecode/bytecode_c24c739.h"
#include "bytecode/bytecode_f8a7c46.h"
#include "bytecode/bytecode_62273e5.h"
#include "bytecode/bytecode_8b912d1.h"
#include "bytecode/bytecode_23381a5.h"
#include "bytecode/bytecode_513c026.h"
#include "bytecode/bytecode_4ee82a2.h"
#include "bytecode/bytecode_1add52b.h"
#include "bytecode/bytecode_ed80f45.h"
#include "bytecode/bytecode_85585c7.h"
#include "bytecode/bytecode_7124599.h"
#include "bytecode/bytecode_23441ec.h"
#include "bytecode/bytecode_6174585.h"
#include "bytecode/bytecode_64872ca.h"
#include "bytecode/bytecode_7d2d144.h"
#include "bytecode/bytecode_30c1229.h"
#include "bytecode/bytecode_48f1d02.h"
#include "bytecode/bytecode_65d48d6.h"
#include "bytecode/bytecode_be46be7.h"
#include "bytecode/bytecode_97f34a1.h"
#include "bytecode/bytecode_2185c01.h"
#include "bytecode/bytecode_e82dc40.h"
#include "bytecode/bytecode_8cab401.h"
#include "bytecode/bytecode_703004f.h"
#include "bytecode/bytecode_31ce3c5.h"
#include "bytecode/bytecode_8c1731b.h"
#include "bytecode/bytecode_0b806ee.h"


void register_decomp_versions();
GDScriptDecomp *create_decomp_for_commit(int p_commit_hash);
Vector<Ref<GDScriptDecomp>> get_decomps_for_bytecode_ver(int bytecode_version, bool include_dev = false);
struct GDScriptDecompVersion {
	static Vector<GDScriptDecompVersion> decomp_versions;
	static int number_of_custom_versions;
	int commit = 0;
	String name;
	int bytecode_version;
	bool is_dev;
	String min_version;
	String max_version;
	int parent;
	Dictionary custom;

	bool is_custom() const {
		return custom.size() > 0;
	}

	Ref<GodotVer> get_min_version() const {
		return GodotVer::parse(min_version);
	}
	Ref<GodotVer> get_max_version() const {
		return GodotVer::parse(max_version);
	}

	static GDScriptDecompVersion create_version_from_custom_def(Dictionary p_custom_def);
	static GDScriptDecompVersion create_derived_version_from_custom_def(int revision, Dictionary p_custom_def);
	static int register_decomp_version_custom(Dictionary p_custom_def);
	static int register_derived_decomp_version_custom(int revision, Dictionary p_custom_def);

	GDScriptDecomp *create_decomp() const;
};
Vector<GDScriptDecompVersion> get_decomp_versions(bool include_dev = true, int ver_major = 0);

static constexpr int LATEST_GDSCRIPT_COMMIT = 0xebc36a7;
